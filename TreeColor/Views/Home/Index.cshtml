@using ThreeColor.Data.Models
@model List<ThreeColor.Data.Models.Tests>
@{
    ViewBag.Title = "Home Page";
    Tests CurrentTest = ViewBag.CurrentTest;
    List<Points> PointsForCurrentTest = ViewBag.PointsForCurrentTest;
}

    @if (ViewBag.Result != null)
    {
        <div id="parent" class="row" style="margin-top:20px;vertical-align:middle;align-content:center;width:100%;height:80%; padding:20px 20px 20px 20px">
            <p >Спасибо за прохождение теста! <span style="color:red">Красной линией</span> отмечено время вашей реакции</p>
            <div  id="insertHere"></div>
        </div>
    }
    @if (ViewBag.ErrorMessage != null || ViewBag.SuccessMessage != null)
    {
    <div class="row">
        @if (ViewBag.ErrorMessage != null)
        {
            <div class="card-panel red lighten-3" role="alert">
                @ViewBag.ErrorMessage
            </div>
        }
        @if (ViewBag.SuccessMessage != null)
        {
            <div class="card-panel teal lighten-2" role="alert">
                @ViewBag.SuccessMessage
            </div>
        }
    </div>
    }
    @if (CurrentTest != null && PointsForCurrentTest!= null && PointsForCurrentTest.Count > 0)
    {
        <div class="row">
            <div class="col s2">
                <button class="waves-effect waves-light btn" id="StartTesting">Начать тестирование</button>
            </div>
            <p class="counter right">0/30</p>
        </div>

        <div class="results" style="text-align : center;">
            <h5> Чтобы начать тестирование, нажмите "Начать" </h5>
        </div>
        <div class="row testing" style="height : 75%;">
            @if (CurrentTest != null)
            {
                <div class="col s1" style="min-height: 100%; background-color : #@CurrentTest.FieldColor">
                    @foreach (Points point in PointsForCurrentTest)
                    {
                        <h5 style="color : #@point.Color">@point.Key</h5>
                        <div hidden class="colors">@point.Color</div>
                        <div hidden class="keys">@point.Key</div>
                    }
                </div>
                <div class="col s11" id="CanvasParent" style="height: 100%;">
                    <canvas id="canvas"></canvas>
                </div>
                <script type="text/javascript">
                    //------------
                    //Finding DPI
                    var dpi = {
                        v: 0,
                        get: function (noCache) {
                            if (noCache || dpi.v == 0) {
                                e = document.body.appendChild(document.createElement("DIV"));
                                e.style.width = "1in";
                                e.style.padding = '0';
                                dpi.v = e.offsetWidth;
                                e.parentNode.removeChild(e);
                            }
                            return dpi.v;
                        }
                    }
                    //-----------
                    var fps = 50;
                    var time = 0;
                    var mmPerInch = 25.4;
                    var pxPerInch = dpi.get(false);

                    var pointId;
                    var timeForWait;
                    var currY;
                    var currX;
                    var timer;
                    var pointIds = [@string.Join(" ,",PointsForCurrentTest.Select(p => p.Id))]

                    function GenerateValues()
                    {
                        currX = Math.random() * (canvas.width - 100) + 50;
                        currY = Math.random() * (canvas.height - 100) + 50;
                        timeForWait = Math.random() * (@CurrentTest.MaxInterval - @CurrentTest.MinInterval) + @CurrentTest.MinInterval;
                        pointId = Math.floor(Math.random() * @PointsForCurrentTest.Count);
                    }

                    var allIsGood = false;
                    var radius = (@CurrentTest.PointSize) / 10000 / mmPerInch * pxPerInch;
                    var count = 0;
                    var canvasDiv = document.getElementById('CanvasParent');
                    var canvas = document.getElementById('canvas');
                    canvas.width = canvasDiv.clientWidth;
                    canvas.height = canvasDiv.clientHeight;
                    var context = canvas.getContext('2d');

                    // прирашение радиуса (px/s)
                    var dr = (@CurrentTest.Speed) /10000 / mmPerInch * pxPerInch;
                    var colors;
                    var elements = document.getElementsByClassName("colors");
                    ClearCanvas();
                    GenerateValues();
                    var keys;
                    var colors = ConvertColors(elements);
                    $(".testing").hide();
                    document.getElementById("StartTesting").onclick = StartTesting;

                    function ClearCanvas(){
                        context.rect(0, 0, canvas.width, canvas.height);
                        context.fillStyle = '#@CurrentTest.FieldColor';
                        context.fill();
                    }

                    function Drawing() {
                        GenerateValues();
                        timer = setInterval(function () {
                            if(allIsGood && count <= 30) {
                                if(timeForWait > 0)
                                {
                                    timeForWait -= 1000 / fps;
                                }
                                else
                                {
                                    context.beginPath();
                                    context.arc(currX, currY, radius, 0, 2 * Math.PI, false);
                                    context.fillStyle = '#' + elements[pointId].textContent;
                                    context.strokeStyle = '#@CurrentTest.FieldColor';
                                    context.fill();
                                    context.stroke();
                                    time += 1000 / fps;
                                    radius += dr / fps;
                                }
                            }
                            else {
                                StopTesting();
                            }
                        }, 1000 / fps)
                    }

                    function press(event) {
                        if(allIsGood) {
                            var errCod = null;
                            if(timeForWait > 0) 
                                errCod = 2;
                            if(event.key.toLowerCase().localeCompare(keys[pointId].toLowerCase()) != 0) 
                                errCod = 1;
                            var Result = {
                                'TestingNumber': @ViewBag.TestingNumber,
                                'PointId' : pointIds[pointId],
                                'Time': time,
                                'ErrorCode' : errCod,
                                'UserId' : @ViewBag.CurrentUser.Id,
                            };
                            $.ajax({
                                type: "POST",
                                url: "/Home/PutResult",
                                data: JSON.stringify(Result),
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                error: errorFunc
                            });
                            successFunc(true);
                        }
                    }

                    function successFunc(data) {
                        if(data == true) {
                            $(".counter").text(count++ + "/30");
                            ClearCanvas();
                            time = 0;
                            radius = (@CurrentTest.PointSize) / 10000 / mmPerInch * pxPerInch;
                            GenerateValues();
                        }
                        else {
                            StopTesting();
                        }
                    }

                    function errorFunc(errorData) {
                        // TODO: Add error handling
                        StopTesting();
                    }

                    function StartTesting() {
                        allIsGood = true;
                        $("#StartTesting").text("Остановить тестирование");
                        document.getElementById('StartTesting').onclick = StopTesting;
                        Drawing();
                        document.onkeypress = function(e) {
                            press(e);
                        };

                        $(".results").hide();
                        $(".testing").show();
                    }

                    function StopTesting() {
                        clearInterval(timer);
                        allIsGood = false;
                        ClearCanvas();
                        $(".counter").text("0/30");
                        $("#StartTesting").text("Начать тестирование");
                        document.getElementById('StartTesting').onclick = StartTesting;
                        document.onkeypress = null;

                        $(".results").hide();
                        $(".testing").hide();

                        window.location.href = "/Home/Index?showResults=true";
                    }

                    function ConvertColors(elem){
                        var colors = [];
                        keys = [];
                        var keyElements = document.getElementsByClassName("keys");
                        var j;
                        for(j = 0; j < elem.length; j++){
                            colors.push(elem[j].textContent);
                            keys.push(keyElements[j].textContent);
                        }
                        return colors;
                    }
                </script>
            }
            else
            {
                <p>Select the test!</p>
            }
        </div>
        }

<script>
    document.body.onload = addElement;

    function addElement() {

        // создаем новый элемент div
        // и добавляем в него немного контента

        var newImg = document.createElement("img");
        var parent = document.getElementById("parent");

        newImg.setAttribute("src", "/Home/CreateChart/?width=" + (parent.clientWidth - 40) + "&height=" + (parent.clientHeight - 40));
        // добавляем только что созданый элемент в дерево DOM

        var my_div = document.getElementById("insertHere");
        parent.insertBefore(newImg, my_div);
    }
</script>